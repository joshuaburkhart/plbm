Joshua Burkhart
3/18/2012
Dr. John Conery
CIS 555

##########
#  PBLM  #
##########

Testing:

wrote a main for testing with gcc
used valgrind to assure memory integrity
---------------------------------------------
[jburkhar@cn179 cport]$ valgrind ./a.out .5 .5
==30534== Memcheck, a memory error detector
==30534== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
==30534== Using Valgrind-3.6.0 and LibVEX; rerun with -h for copyright info
==30534== Command: ./a.out .5 .5
==30534== 
est=
  0.398128  0.000000
MSE=
  0.009822
==30534== 
==30534== HEAP SUMMARY:
==30534==     in use at exit: 0 bytes in 0 blocks
==30534==   total heap usage: 91,128 allocs, 91,128 frees, 515,832,997 bytes allocated
==30534== 
==30534== All heap blocks were freed -- no leaks are possible
==30534== 
==30534== For counts of detected and suppressed errors, rerun with: -v
==30534== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
----------------------------------------------

mex binary integrates with matlab code
----------------------------------------------
>> IG_AmNat_orig

flags =

     1     1


MSE =

    0.0101


est =

    0.3981    0.0000


MSE =

    0.0098


d1_d2 =

    0.3981    0.0000


lowerconf_mean_upperconf_d =

    0.0650    0.3889    0.7688
         0    0.0339    0.2109


min_d =

         0         0    0.0060


max_d =

    1.1831    0.4507    0.0194


cor_d =

    1.0000   -0.0211    0.0105
   -0.0211    1.0000    0.0049
    0.0105    0.0049    1.0000


flags =

     1     2


MSE =

    0.0065


est =

    1.2955   -0.1859


MSE =

    0.0052


d1_d2 =

    1.2955    0.1859


lowerconf_mean_upperconf_d =

    0.9149    1.2774    1.7452
    0.0000    0.1828    0.4514


min_d =

    0.7240         0    0.0033


max_d =

    1.9694    0.7356    0.0088


cor_d =

    1.0000    0.0632    0.0122
    0.0632    1.0000    0.0129
    0.0122    0.0129    1.0000


flags =

     2     1


MSE =

    0.2605


est =

    0.4529   -0.0856


MSE =

    0.2356


d1_d2 =

    0.4529    0.0856


lowerconf_mean_upperconf_d =

    0.2438    0.4462    0.6630
         0    0.0877    0.2308


min_d =

    0.0533         0    0.1980


max_d =

    0.8612    0.3704    0.3669


cor_d =

    1.0000   -0.0295    0.0174
   -0.0295    1.0000   -0.0183
    0.0174   -0.0183    1.0000


flags =

     2     2


MSE =

    0.2125


est =

    0.6288    0.1933


MSE =

    0.1981


d1_d2 =

    0.6288    0.1933


lowerconf_mean_upperconf_d =

    0.4490    0.6223    0.8043
    0.0374    0.1858    0.3485


min_d =

    0.2744         0    0.1495


max_d =

    0.9751    0.5193    0.2755


cor_d =

    1.0000    0.0369    0.0487
    0.0369    1.0000   -0.0003
    0.0487   -0.0003    1.0000

>> %-- 03/18/2012 08:36:38 PM --%
----------------------------------------------

wrote cuda_kron... cron operation for gpu
small sample dataset shows performance loss
----------------------------------------------
[jburkhar@cn144 cport]$ make clean
rm -rf *.out *.o *.orig *.mexa64
[jburkhar@cn144 cport]$ make
bash -c "module load gcc & \
	g++ -O3 main.cpp minimize.cpp arraylib.cpp glob_init.cpp -lm -llapack
-lblas -fopenmp"
[jburkhar@cn144 cport]$ time ./a.out .5 .5
est=
  0.398128  0.000000
MSE=
  0.009822

real	0m3.580s
user	0m7.482s
sys	0m0.031s
[jburkhar@cn144 cport]$ make cuda
bash -c "module load gcc/4.3.6 && \
	nvcc -O3 main.cpp minimize.cpp arraylib.cu glob_init.cpp -lm -llapack
-lblas"
ptxas /tmp/tmpxft_000026b5_00000000-2_arraylib.ptx, line 80; warning : Double
is not supported. Demoting to float
[jburkhar@cn144 cport]$ time ./a.out .5 .5
est=
  0.398128  0.000000
MSE=
  0.009822

real	0m8.921s
user	0m3.688s
sys	0m0.592s
[jburkhar@cn144 cport]$ 
----------------------------------------------

Next Steps:

consider transposition analysis / cache hit rate
consider replacing doubles with smaller datatype
port entire program to c++
parallelize matrix operations with OpenMP, MPI, OpenCL, CUDA, or CULA packages
use C_Source revision to begin R integration

References:

http://www.netlib.org/lapack/double
http://cboard.cprogramming.com/cplusplus-programming/30001-determinant-calculation.html
http://people.sc.fsu.edu/~jburkardt/cpp_src/asa047/asa047.html
www.scholarpedia.org/article/Nelder-Mead_algorithm
http://tolstoy.newcastle.edu.au/R/help/06/06/28963.html
http://www.mathworks.com/help/techdoc/math/bsotu2d.html#bsgpq6p-11
